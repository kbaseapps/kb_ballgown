# -*- coding: utf-8 -*-
#BEGIN_HEADER
import os
import json
from kb_ballgown.core.ballgown_util import BallgownUtil
#END_HEADER


class kb_ballgown:
    '''
    Module Name:
    kb_ballgown

    Module Description:
    A KBase module: kb_ballgown
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "2.0.0"
    GIT_URL = "https://github.com/kbaseapps/kb_ballgown.git"
    GIT_COMMIT_HASH = "51608fc80b999a7f69f0fd8000c53273915bf2c4"

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        self.config = config
        self.config['SDK_CALLBACK_URL'] = os.environ['SDK_CALLBACK_URL']
        self.config['KB_AUTH_TOKEN'] = os.environ['KB_AUTH_TOKEN']
        #END_CONSTRUCTOR
        pass


    def run_ballgown_app(self, ctx, params):
        """
        run_ballgown_app: run Ballgown app
        http://bioconductor.org/packages/release/bioc/html/ballgown.html
        :param params: instance of type "BallgownInput" (required params:
           expressionset_ref: ExpressionSet object reference
           diff_expression_matrix_set_name:
           KBaseSets.DifferetialExpressionMatrixSet name alpha_cutoff: q
           value cutoff fold_change_cutoff: fold change cutoff num_threads:
           number of threads workspace_name: the name of the workspace it
           gets saved to optional params: run_all_combinations: run all
           paired condition combinations condition_labels: conditions for
           expression set object maximum_num_genes: used to filter genes in
           the differential expression matrix) -> structure: parameter
           "expressionset_ref" of type "obj_ref" (An X/Y/Z style reference),
           parameter "diff_expression_matrix_set_suffix" of String, parameter
           "num_threads" of Long, parameter "workspace_name" of String,
           parameter "input_type" of String, parameter "run_all_combinations"
           of type "boolean" (A boolean - 0 for false, 1 for true. @range (0,
           1)), parameter "condition_labels" of list of String
        :returns: instance of type "BallgownResult" (result_directory: folder
           path that holds all files generated by run_ballgown_app
           diff_expression_obj_ref: generated RNASeqDifferetialExpression
           object reference filtered_expression_matrix_ref: generated
           ExpressionMatrix object reference report_name: report name
           generated by KBaseReport report_ref: report reference generated by
           KBaseReport) -> structure: parameter "result_directory" of String,
           parameter "diff_expression_matrix_set_ref" of type "obj_ref" (An
           X/Y/Z style reference), parameter "report_name" of String,
           parameter "report_ref" of String
        """
        # ctx is the context object
        # return variables are: returnVal
        #BEGIN run_ballgown_app
        print '--->\nRunning kb_ballgown.run_ballgown_app\nparams:'
        print json.dumps(params, indent=1)

        for key, value in params.iteritems():
            if isinstance(value, basestring):
                params[key] = value.strip()

        ballgown_runner = BallgownUtil(self.config)
        returnVal = ballgown_runner.run_ballgown_app(params)
        #END run_ballgown_app

        # At some point might do deeper type checking...
        if not isinstance(returnVal, dict):
            raise ValueError('Method run_ballgown_app return value ' +
                             'returnVal is not type dict as required.')
        # return the results
        return [returnVal]
    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
